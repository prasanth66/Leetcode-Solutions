
class Solution {
    static HashSet<String>hash;
    
    private void helper(int[]arr,int target,int i, List<List<Integer>>ans,String str){
        if(target==0 && !hash.contains(str)){
            List<Integer>list=new ArrayList<>();
            hash.add(str);
            int num=0;
            for(int j=0;j<str.length();j++){
                if(str.charAt(j)==' ' && num!=0){
                    list.add(num);
                    num=0;
                }
                else
                    num=(num*10)+(Integer.parseInt(str.charAt(j)+""));
                    
            }
            ans.add(list);
            return;
        }
        if(i>=arr.length || target<0)
            return;
        
        helper(arr,target,i+1,ans,str);
        helper(arr,target-arr[i],i+1,ans,str+Integer.toString(arr[i])+" ");
    }
    
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>>ans=new ArrayList<>();
        hash=new HashSet<>();
        helper(candidates,target,0,ans,"");
        return ans;
    }
}
